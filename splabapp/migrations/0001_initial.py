# Generated by Django 5.2.4 on 2025-07-23 13:50

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bug',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Bugâ€™s title', max_length=200, verbose_name='Bug Title')),
                ('description', models.TextField(help_text='Full bug description', verbose_name='Description')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], help_text='Low / Medium / High / Critical', max_length=10, verbose_name='Severity')),
                ('category', models.CharField(choices=[('ui', 'UI'), ('backend', 'Backend'), ('performance', 'Performance'), ('security', 'Security'), ('other', 'Other')], default='other', help_text='UI / Backend / Performance / Security / Other', max_length=20, verbose_name='Category')),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', help_text='Open / In Progress / Resolved / Closed', max_length=15, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when bug was created', verbose_name='Created At')),
                ('full_name', models.CharField(blank=True, help_text='Full name of the person reporting', max_length=100, null=True, verbose_name='Reporter Name')),
                ('email', models.EmailField(blank=True, help_text='Email of the person reporting', max_length=254, null=True, verbose_name='Reporter Email')),
                ('phone', models.CharField(help_text='Phone number of the person reporting', max_length=20, verbose_name='Reporter Phone')),
                ('splab_number', models.CharField(blank=True, help_text='Auto-generated bug ID (e.g. SPLB1234)', max_length=8, null=True, unique=True, verbose_name='SPLAB Number')),
                ('logs', models.TextField(blank=True, help_text='Logs entered during bug submission (one per line)', verbose_name='Logs')),
                ('tools_used', models.TextField(blank=True, help_text='List of tools used (one per line)', verbose_name='Tools Used')),
            ],
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('subject', models.CharField(choices=[('general', 'General Inquiry'), ('bug', 'Report a Bug'), ('tool', 'Tool Suggestion'), ('media', 'Media Inquiry'), ('other', 'Other')], max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BugCodeFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Code file (proof-of-concept, exploit, patch)', upload_to='bug_code/', verbose_name='Code File')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='When the code file was uploaded', verbose_name='Uploaded At')),
                ('bug', models.ForeignKey(help_text='The bug this code file is for', on_delete=django.db.models.deletion.CASCADE, related_name='code_files', to='splabapp.bug', verbose_name='Related Bug')),
            ],
        ),
        migrations.CreateModel(
            name='BugMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Image or video file', upload_to='bug_media/', verbose_name='Media File')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='When the media was uploaded', verbose_name='Uploaded At')),
                ('bug', models.ForeignKey(help_text='The bug this media is for', on_delete=django.db.models.deletion.CASCADE, related_name='media_files', to='splabapp.bug', verbose_name='Related Bug')),
            ],
        ),
        migrations.CreateModel(
            name='BugWebsite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='Site associated with the bug', verbose_name='Website URL')),
                ('bug', models.ForeignKey(help_text='The bug this website is for', on_delete=django.db.models.deletion.CASCADE, related_name='websites', to='splabapp.bug', verbose_name='Related Bug')),
            ],
        ),
        migrations.CreateModel(
            name='SuccessfulFixed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('splab_number', models.CharField(blank=True, help_text='Auto-generated SPLF ID (e.g. SPLF5678)', max_length=8, null=True, unique=True, verbose_name='SPLF Number')),
                ('description', models.TextField(help_text='Explanation of the fix', verbose_name='Fix Description')),
                ('fixed_at', models.DateTimeField(auto_now_add=True, help_text='When the fix was submitted', verbose_name='Fixed At')),
                ('evidence_media', models.FileField(blank=True, help_text='Screenshot/video proof of the fix', null=True, upload_to='fix_evidence/media/', verbose_name='Fix Evidence Media')),
                ('evidence_code', models.FileField(blank=True, help_text='Code patch or script that solved the issue', null=True, upload_to='fix_evidence/code/', verbose_name='Fix Evidence Code')),
                ('category', models.CharField(choices=[('ui', 'UI'), ('backend', 'Backend'), ('performance', 'Performance'), ('security', 'Security'), ('other', 'Other')], default='other', help_text='Category of the bug', max_length=20, verbose_name='Category')),
                ('full_name', models.CharField(blank=True, help_text='Full name of the person who fixed', max_length=100, null=True, verbose_name='Fixed By Name')),
                ('email', models.EmailField(blank=True, help_text='Email of the person who fixed', max_length=254, null=True, verbose_name='Fixed By Email')),
                ('phone', models.CharField(help_text='Phone number of the person who fixed', max_length=20, verbose_name='Fixed By Phone')),
                ('bug', models.ForeignKey(help_text='The bug this fix is for', on_delete=django.db.models.deletion.CASCADE, related_name='successful_fixes', to='splabapp.bug', verbose_name='Related Bug')),
            ],
        ),
    ]
